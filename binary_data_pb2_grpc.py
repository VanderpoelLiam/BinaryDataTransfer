# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import binary_data_pb2 as binary__data__pb2


class UploadStub(object):
  """Interfaces exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateBlob = channel.unary_unary(
        '/binaryData.Upload/CreateBlob',
        request_serializer=binary__data__pb2.BlobSpec.SerializeToString,
        response_deserializer=binary__data__pb2.Response.FromString,
        )


class UploadServicer(object):
  """Interfaces exported by the server.
  """

  def CreateBlob(self, request, context):
    """Checks if we can create a Blob specified by BlobSpec on the FileServer
    and returns the BlobInfo to access the Blob. Returns an Error if there is
    not enough space.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UploadServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateBlob': grpc.unary_unary_rpc_method_handler(
          servicer.CreateBlob,
          request_deserializer=binary__data__pb2.BlobSpec.FromString,
          response_serializer=binary__data__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'binaryData.Upload', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class FileServerStub(object):
  """
  service Download {
  // Gets the BlobInfo assiciated with the given BlobID
  rpc GetBlobInfo (BlobId) returns (DeviceResponse);

  // Gets the Chunk specified by ChunkSpec
  rpc GetChunk (ChunkSpec) returns (DeviceResponse);

  // Performs an Action which generates a Blob. Then returns the associated
  // BlobId. In this case it gets the measurement data of the device.
  rpc GetMeasurementData (Empty) returns (DeviceResponse);
  }
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ValidateFileServer = channel.unary_unary(
        '/binaryData.FileServer/ValidateFileServer',
        request_serializer=binary__data__pb2.BlobSpec.SerializeToString,
        response_deserializer=binary__data__pb2.Response.FromString,
        )


class FileServerServicer(object):
  """
  service Download {
  // Gets the BlobInfo assiciated with the given BlobID
  rpc GetBlobInfo (BlobId) returns (DeviceResponse);

  // Gets the Chunk specified by ChunkSpec
  rpc GetChunk (ChunkSpec) returns (DeviceResponse);

  // Performs an Action which generates a Blob. Then returns the associated
  // BlobId. In this case it gets the measurement data of the device.
  rpc GetMeasurementData (Empty) returns (DeviceResponse);
  }
  """

  def ValidateFileServer(self, request, context):
    """Checks if we can create a Blob specified by BlobSpec on the FileServer
    and returns the ExpirationTime until which the Blob is valid. Returns an
    Error if there is not enough space.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FileServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ValidateFileServer': grpc.unary_unary_rpc_method_handler(
          servicer.ValidateFileServer,
          request_deserializer=binary__data__pb2.BlobSpec.FromString,
          response_serializer=binary__data__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'binaryData.FileServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
