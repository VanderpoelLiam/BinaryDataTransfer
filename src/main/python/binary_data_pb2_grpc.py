# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import binary_data_pb2 as binary__data__pb2


class UploadStub(object):
  """Interfaces exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateBlob = channel.unary_unary(
        '/binaryData.Upload/CreateBlob',
        request_serializer=binary__data__pb2.BlobSpec.SerializeToString,
        response_deserializer=binary__data__pb2.DeviceResponse.FromString,
        )
    self.UploadChunk = channel.unary_unary(
        '/binaryData.Upload/UploadChunk',
        request_serializer=binary__data__pb2.Chunk.SerializeToString,
        response_deserializer=binary__data__pb2.DeviceResponse.FromString,
        )
    self.DeleteBlob = channel.unary_unary(
        '/binaryData.Upload/DeleteBlob',
        request_serializer=binary__data__pb2.BlobId.SerializeToString,
        response_deserializer=binary__data__pb2.DeviceResponse.FromString,
        )
    self.GetAverageBrightness = channel.unary_unary(
        '/binaryData.Upload/GetAverageBrightness',
        request_serializer=binary__data__pb2.BlobId.SerializeToString,
        response_deserializer=binary__data__pb2.DeviceResponse.FromString,
        )


class UploadServicer(object):
  """Interfaces exported by the server.
  """

  def CreateBlob(self, request, context):
    """Creates a Blob with specs matching those in BlobSpec.
    DeviceResponse contains the created Blob in its Payload OR it changes
    the ErrorStatus if there is not enough space to create the Blob of the
    given size.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UploadChunk(self, request, context):
    """Uploads a Chunk to the server
    DeviceResponse updates the ExpirationTime in its Payload OR it changes
    the ErrorStatus if it fails to upload a chunk
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteBlob(self, request, context):
    """Deletes the Blob associated with BlobId. DeviceResponse contains a
    confirmation message OR it changes the ErrorStatus if an issue occurs.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAverageBrightness(self, request, context):
    """Performs a pre-defined analysis on the Blob associated with BlobId. In
    this case it gets the average brightness of an image.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UploadServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateBlob': grpc.unary_unary_rpc_method_handler(
          servicer.CreateBlob,
          request_deserializer=binary__data__pb2.BlobSpec.FromString,
          response_serializer=binary__data__pb2.DeviceResponse.SerializeToString,
      ),
      'UploadChunk': grpc.unary_unary_rpc_method_handler(
          servicer.UploadChunk,
          request_deserializer=binary__data__pb2.Chunk.FromString,
          response_serializer=binary__data__pb2.DeviceResponse.SerializeToString,
      ),
      'DeleteBlob': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteBlob,
          request_deserializer=binary__data__pb2.BlobId.FromString,
          response_serializer=binary__data__pb2.DeviceResponse.SerializeToString,
      ),
      'GetAverageBrightness': grpc.unary_unary_rpc_method_handler(
          servicer.GetAverageBrightness,
          request_deserializer=binary__data__pb2.BlobId.FromString,
          response_serializer=binary__data__pb2.DeviceResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'binaryData.Upload', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DownloadStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetBlobInfo = channel.unary_unary(
        '/binaryData.Download/GetBlobInfo',
        request_serializer=binary__data__pb2.BlobId.SerializeToString,
        response_deserializer=binary__data__pb2.DeviceResponse.FromString,
        )
    self.GetChunk = channel.unary_unary(
        '/binaryData.Download/GetChunk',
        request_serializer=binary__data__pb2.ChunkSpec.SerializeToString,
        response_deserializer=binary__data__pb2.DeviceResponse.FromString,
        )
    self.GetMeasurementData = channel.unary_unary(
        '/binaryData.Download/GetMeasurementData',
        request_serializer=binary__data__pb2.Empty.SerializeToString,
        response_deserializer=binary__data__pb2.DeviceResponse.FromString,
        )


class DownloadServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetBlobInfo(self, request, context):
    """Gets the BlobInfo assiciated with the given BlobID
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetChunk(self, request, context):
    """Gets the Chunk specified by ChunkSpec
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetMeasurementData(self, request, context):
    """Performs an Action which generates a Blob. Then returns the associated
    BlobId. In this case it gets the measurement data of the device.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DownloadServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetBlobInfo': grpc.unary_unary_rpc_method_handler(
          servicer.GetBlobInfo,
          request_deserializer=binary__data__pb2.BlobId.FromString,
          response_serializer=binary__data__pb2.DeviceResponse.SerializeToString,
      ),
      'GetChunk': grpc.unary_unary_rpc_method_handler(
          servicer.GetChunk,
          request_deserializer=binary__data__pb2.ChunkSpec.FromString,
          response_serializer=binary__data__pb2.DeviceResponse.SerializeToString,
      ),
      'GetMeasurementData': grpc.unary_unary_rpc_method_handler(
          servicer.GetMeasurementData,
          request_deserializer=binary__data__pb2.Empty.FromString,
          response_serializer=binary__data__pb2.DeviceResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'binaryData.Download', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class FileServerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ValidateFileServer = channel.unary_unary(
        '/binaryData.FileServer/ValidateFileServer',
        request_serializer=binary__data__pb2.BlobSpec.SerializeToString,
        response_deserializer=binary__data__pb2.Validation.FromString,
        )
    self.Save = channel.unary_unary(
        '/binaryData.FileServer/Save',
        request_serializer=binary__data__pb2.Blob.SerializeToString,
        response_deserializer=binary__data__pb2.ErrorStatus.FromString,
        )
    self.Delete = channel.unary_unary(
        '/binaryData.FileServer/Delete',
        request_serializer=binary__data__pb2.BlobId.SerializeToString,
        response_deserializer=binary__data__pb2.ErrorStatus.FromString,
        )
    self.Download = channel.unary_unary(
        '/binaryData.FileServer/Download',
        request_serializer=binary__data__pb2.BlobId.SerializeToString,
        response_deserializer=binary__data__pb2.ErrorStatus.FromString,
        )


class FileServerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ValidateFileServer(self, request, context):
    """Checks if a blob of specified by BlobSpec can be stored on the server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Save(self, request, context):
    """Saves the Blob to the server, then returns the error status.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    """Deletes the Blob with given BlobId, then returns the error status.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Download(self, request, context):
    """Downloads the Blob with given BlobId, then returns the error status.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FileServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ValidateFileServer': grpc.unary_unary_rpc_method_handler(
          servicer.ValidateFileServer,
          request_deserializer=binary__data__pb2.BlobSpec.FromString,
          response_serializer=binary__data__pb2.Validation.SerializeToString,
      ),
      'Save': grpc.unary_unary_rpc_method_handler(
          servicer.Save,
          request_deserializer=binary__data__pb2.Blob.FromString,
          response_serializer=binary__data__pb2.ErrorStatus.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=binary__data__pb2.BlobId.FromString,
          response_serializer=binary__data__pb2.ErrorStatus.SerializeToString,
      ),
      'Download': grpc.unary_unary_rpc_method_handler(
          servicer.Download,
          request_deserializer=binary__data__pb2.BlobId.FromString,
          response_serializer=binary__data__pb2.ErrorStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'binaryData.FileServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
