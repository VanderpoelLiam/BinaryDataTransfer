syntax = "proto3";
import "google/protobuf/timestamp.proto";

package binaryData;


// Interfaces exported by the server.
service Upload {

    // Checks if we can create a Blob specified by BlobSpec on the FileServer
    // and returns the BlobInfo to access the Blob. Returns an Error if there is
    // not enough space.
    rpc CreateBlob (BlobSpec) returns (Response);


    // Uploads a Chunk to the server and returns the updated ExpirationTime
    // Returns an Error if it fails for any reason.
    rpc UploadChunk (Chunk) returns (Response);

    // Deletes the Blob associated with BlobId and returns an Error object
    // containing a description of the error that occured, or an empty
    // description if the deletion was a success.
    rpc DeleteBlob (BlobId) returns (Error);

    /*
    // Performs a pre-defined analysis on the Blob associated with BlobId. In
    // this case it gets the average brightness of an image.
    rpc GetAverageBrightness (BlobId) returns (DeviceResponse);
    */
}

service Download {
    // Downloads the Chunk specified by ChunkSpec from the server and returns
    // the associated Payload and ExpirationTime in the response. Returns an
    // Error if it fails for any reason.
    rpc GetChunk (ChunkSpec) returns (Response);

    /*
    // Gets the BlobInfo assiciated with the given BlobID
    rpc GetBlobInfo (BlobId) returns (DeviceResponse);

    // Performs an Action which generates a Blob. Then returns the associated
    // BlobId. In this case it gets the measurement data of the device.
    rpc GetMeasurementData (Empty) returns (DeviceResponse);
    */
}

service FileServer {
    // Checks if we can create a Blob specified by BlobSpec on the FileServer
    // and returns the ExpirationTime until which the Blob is valid. Returns an
    // Error if there is not enough space.
    rpc ValidateFileServer (BlobSpec) returns (Response);


    // Saves a Chunk to the server and returns the updated ExpirationTime
    // Returns an Error if there if it fails for any reason.
    rpc Save (Chunk) returns (Response);

    // Downloads the Chunk specified by ChunkSpec from the server and returns
    // the associated Payload and ExpirationTime in the response. Returns an
    // Error if it fails for any reason.
    rpc Download (ChunkSpec) returns (Response);

    // Deletes the Blob associated with BlobId and returns an Error object
    // containing a description of the error that occured, or an empty
    // description if the deletion was a success.
    rpc Delete (BlobId) returns (Error);
}

// Messages used by above services
message BlobSpec {
    // Size of Blob in bits
    int32 size = 1;

    // Number of Chunks to divide Blob into for transmission
    int32 chunk_count = 2;
}

message BlobInfo {
    // Unique Blob identifier
    BlobId id = 1;

    // When the BlobID is going to be rendered invalid, i.e. the client can not
    // upload any more chunks to this BlobID and can not expect it to be
    // useful for commands
    ExpirationTime valid_until = 2;
}

message Error {
    // True if error has occured, False otherwise
    bool has_occured = 1;
    // Description of error
    string description = 2;
}

message ExpirationTime {
    // Time when the Blob will expire
    google.protobuf.Timestamp time = 1;
}

message BlobId {
    int32 id = 1;
}

message Response {
    Error error = 1;

    ExpirationTime valid_until = 2;

    BlobInfo blob_info = 3;

    bytes payload = 4;
}

message Chunk {
    // Associated Blob id
    BlobId blob_id = 1;

    // Blobs are divided into Chunks. This is the index of the Chunk within
    // it's Blob (starting at 0).
    int32 index = 2;

    // Data being transferred.
    bytes payload = 3;
}

message ChunkSpec {
    // Associated Blob id
    BlobId blob_id = 1;

    // Desired chunk index in the Blob.
    int32 index = 2;
}


/*
message Blob {
    // Unique Blob identifier
    BlobId id = 1;

    // Details about the specification used to create the Blob and when the
    // BlobId will be invalid.
    BlobInfo info = 2;

    // Data being transferred.
    bytes payload = 3;
}

message Empty {

}
*/
