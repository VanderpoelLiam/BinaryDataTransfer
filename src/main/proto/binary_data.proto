syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

package binaryData;


// Interfaces exported by the server.
service Upload {
    // Creates a Blob with specs matching those in BlobSpec.
    // DeviceResponse contains the created Blob in its Payload OR it changes
    // the ErrorStatus if there is not enough space to create the Blob of the
    // given size.
    rpc CreateBlob (BlobSpec) returns (DeviceResponse);

    // Uploads a Chunk to the server
    // DeviceResponse updates the ExpirationTime in its Payload OR it changes
    // the ErrorStatus if it fails to upload a chunk
    rpc UploadChunk (Chunk) returns (DeviceResponse);

    // Deletes the Blob associated with BlobId. DeviceResponse contains a
    // confirmation message OR it changes the ErrorStatus if an issue occurs.
    rpc DeleteBlob (BlobId) returns (DeviceResponse);

    // Performs a pre-defined analysis on the Blob associated with BlobId. In
    // this case it gets the average brightness of an image.
    rpc GetAverageBrightness (BlobId) returns (DeviceResponse);
}

service Download {
    // Gets the BlobInfo assiciated with the given BlobID
    rpc GetBlobInfo (BlobId) returns (DeviceResponse);

    // Gets the Chunk specified by ChunkSpec
    rpc GetChunk (ChunkSpec) returns (DeviceResponse);

    // Performs an Action which generates a Blob. Then returns the associated
    // BlobId. In this case it gets the measurement data of the device.
    rpc GetMeasurementData (Empty) returns (DeviceResponse);
}

service FileServer {
    // Checks if a blob of specified by BlobSpec can be stored on the server.
    rpc ValidateFileServer (BlobSpec) returns (Validation);

    // Saves the Blob to the server, then returns the error status.
    rpc Save (Blob) returns (ErrorStatus);

    // Deletes the Blob with given BlobId, then returns the error status.
    rpc Delete (BlobId) returns (ErrorStatus);

    // Downloads the Blob with given BlobId, then returns the error status.
    rpc Download (BlobId) returns (ErrorStatus);
}

message Validation {
    // Flag is set to True if the specified blob can be stored, and set to
    // False otherwise.
    bool wasSuccess = 1;

    // Time until when the server will store the Blob specified.
    ExpirationTime expiration = 2;
}

// Messages used by above services
message BlobSpec {
    // Size of Blob in bits
    int32 blobSize = 1;

    // Number of Chunks to divide Blob into for transmission
    int32 chunkCount = 2;
}

message BlobInfo {
    // Details about the size of the Blob and number of Chunks per Blob
    BlobSpec spec = 1;

    // When the BlobID is going to be rendered invalid, i.e. the client can not
    // upload any more chunks to this BlobID and can not expect it to be
    // useful for commands
    ExpirationTime expiration = 2;
}

message Blob {
    // Unique Blob identifier
    BlobId id = 1;

    // Details about the specification used to create the Blob and when the
    // BlobId will be invalid.
    BlobInfo info = 2;
}

message BlobId {
    int32 id = 1;
}

message ExpirationTime {
    // Time until when the server will store the Blob
    google.protobuf.Timestamp time = 1;
}

message ChunkSpec {
    // Associated Blob id
    BlobId blobId = 1;

    // Blobs are divided into Chunks. This is the index of the Chunk within
    // it's Blob which goes from 0 to the chunkCount - 1. (See BlobSpec for
    // details on the chunkCount).
    int32 index = 2;

    // Size of the Chunk in bits
    int32 size = 3;
}

message Chunk {
    // Details about Chunk size and it's associated Blob.
    ChunkSpec spec = 1;

    // Data being transferred.
    bytes payload = 2;

    // Time when the BlobID is going to be rendered invalid. (See Blob for
    // more details on the expiration time).
    ExpirationTime expiration = 3;
}

message DeviceResponse {
    ErrorStatus error = 1;

    // Data to be sent to client
    google.protobuf.Any payload = 2;
}

message ErrorStatus {
    // Flag is set to True if an error occurs, and set to False otherwise.
    bool errorFlag = 1;

    // Description of error
    string description = 2;
}

message Empty {

}
